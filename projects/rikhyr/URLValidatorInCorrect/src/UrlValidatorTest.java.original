/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import junit.framework.TestCase;





/**
 * Performs Validation Test for url validations.
 *
 * @version $Revision: 1128446 $ $Date: 2011-05-27 13:29:27 -0700 (Fri, 27 May 2011) $
 */
public class UrlValidatorTest extends TestCase {

   private boolean printStatus = false;
   private boolean printIndex = false;//print index that indicates current scheme,host,port,path, query test were using.

   public UrlValidatorTest(String testName) {
      super(testName);
   }

   
   
   public void testManualTest()
   {
	   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
	   System.out.println(urlVal.isValid("http://www.amazon.com"));
	   
	   
   }
   
   
   public void testYourFirstPartition()
   {
	   
   }
   
   public void testYourSecondPartition(){
	   
   }
   
   
   public void testIsValid(Object[] testObjects, long options) {
   UrlValidator urlVal = new UrlValidator(null, null, options);
   String basic_scheme = "http://";
   String[] basic_urls = {"www.google.com","localhost","3.141.52.96","[FEDC:BA98:7654:3210:FEDC:BA98:7654:3210]","[1080:0:0:0:8:800:200C:4171]", "[3ffe:2a00:100:7031::1]","[1080::8:800:200C:417A]","[::192.9.5.5]","[::FFFF:129.144.52.38]","[2010:836B:4179::836B:4179]"};
   //IPv6 addressing in accordance with http://www.ietf.org/rfc/rfc2732.txt
   
   String basic_user = "user";
   String basic_password = "password";
   String basic_uri = "search";
   String basic_port = "8080";
   String basic_anchor = "#anchor";
   String loc_url = "";
   String basic_url = "";
   String loc_txt = "";
   String[] valid_delimeters = {":","/","@","#"};
   String[] invalid_host_signs = {"\"","'","`","\\",",","_","%","?","!","=","[","]","{","}","&"," "};
   String[] mainvalidschemes = {"bittorrent://","callto://","callto:","feed://","file://","ftp://","gopher://","http://","https://","h3t://","LDAP://","magnet://","mailto://","mailto:","MMS://","mql5buy://","res://","skype://","tel://","viber://"};
   
	   for(int i = 0;i<mainvalidschemes.length;i++)
	   {
	   for(int j= 0;j<basic_urls.length;j++)
	   {
		 basic_url=basic_urls[j];
		 
		 loc_url=mainvalidschemes[i].basic_url;
		 System.out.println("Testing correct protocol handling: ".loc_url);
         assertEquals("Failure ", urlVal.isValid(loc_url), true);
		 
		 System.out.println("Testing correct protocol handling with correct anchoring: ".loc_url."/".basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_anchor), true);
		 
		 System.out.println("Testing correct protocol handling with incorrect anchoring: ".loc_url.basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url.basic_anchor), false);
		 
		 System.out.println("Testing correct protocol and URI handling: ".loc_url."/".basic_uri);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri), true);
		 
		 System.out.println("Testing correct protocol and URI with anchor handling: ".loc_url."/".basic_uri.basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri.basic_anchor), true);
		 
		 System.out.println("Testing correct protocol, URI with incorrect anchor handling: ".loc_url."/".basic_uri."#".basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri."#".basic_anchor), false); //multiple sequential "#" are not allowed
		 
		 System.out.println("Testing correct protocol and incorrect URI handling: ".loc_url."/ ".basic_uri);
         assertEquals("Failure ", urlVal.isValid(loc_url."/ ".basic_uri), false);
		 
		 loc_url.=basic_port;
		 System.out.println("Testing correct protocol and port handling: ".loc_url);
         assertEquals("Failure ", urlVal.isValid(loc_url), true);
		 
		 System.out.println("Testing correct protocol, port and anchor handling: ".loc_url."/".basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_anchor), true);
		 
		 System.out.println("Testing correct protocol, port and incorrect anchor handling: ".loc_url."/".basic_anchor.basic_anchor); 
		 //sequential anchors not allowed!
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_anchor.basic_anchor), false);
		 
		 System.out.println("Testing correct protocol, port and URI handling: ".loc_url."//".basic_uri); //multiple sequential "/" in URI are allowed!!!
         assertEquals("Failure ", urlVal.isValid(loc_url."//".basic_uri), true);
		 
		 System.out.println("Testing correct protocol, port, URI and anchor handling: ".loc_url."/".basic_uri.basic_anchor); 
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri.basic_anchor), true);
		 
		 System.out.println("Testing correct protocol, port, URI and incorrect anchor handling: ".loc_url."/".basic_uri."?".basic_anchor); 
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri."?".basic_anchor), false); 
		 // "?" request should be followed by variables with values set, not the constant definition like structure.
		 
		 System.out.println("Testing correct protocol, port and incorrect URI handling: ".loc_url."#".basic_uri);
         assertEquals("Failure ", urlVal.isValid(loc_url."#".basic_uri), false);
		 
		 loc_url=mainvalidschemes[i];
		 loc_url[2]="0";
		 loc_url.=basic_port;
		 System.out.println("Testing incorrect protocol handling: ".loc_url);
         assertEquals("Failure ", urlVal.isValid(loc_url), false);
		 
		 loc_url.=basic_port;
		 System.out.println("Testing incorrect protocol and correct port handling: ".loc_url);
         assertEquals("Failure ", urlVal.isValid(loc_url), false);
		 
		 loc_url=mainvalidschemes[i].replace("/","");
		 loc_txt=loc_url.replace(":","");
		 loc_url=mainvalidschemes[i].loc_txt."@".basic_url;
		 System.out.println("Testing correct protocol and correct login handling: ".loc_url);
         assertEquals("Failure ", urlVal.isValid(loc_url), true);
		 
		 System.out.println("Testing correct protocol, login and anchor handling: ".loc_url."/".basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_anchor), true);
		 
		 System.out.println("Testing correct protocol, login and incorrect anchor handling: ".loc_url.":".basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url.":".basic_anchor), false);
		 
		 System.out.println("Testing correct protocol, login and URI handling: ".loc_url."///".basic_uri);
         assertEquals("Failure ", urlVal.isValid(loc_url."///".basic_uri), true);
		 
		 System.out.println("Testing correct protocol, login, URI and anchor handling: ".loc_url."/".basic_uri.basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri.basic_anchor), true);
		 
		 System.out.println("Testing correct protocol, login, URI and incorrect anchor handling: ".loc_url."/".basic_uri.basic_anchor."?".basic_uri);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri.basic_anchor."?".basic_uri), false);
		 //no other request processing after anchor!
		 
		 System.out.println("Testing correct protocol, login and incorrect URI handling: ".loc_url."/ /".basic_uri);
         assertEquals("Failure ", urlVal.isValid(loc_url."/ /".basic_uri), false);
		 
		 loc_url.=basic_port;
		 System.out.println("Testing correct protocol, correct port and correct login  handling: ".loc_url);
         assertEquals("Failure ", urlVal.isValid(loc_url), true);
		 
		 System.out.println("Testing correct protocol, port login and anchor  handling: ".loc_url."/".basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_anchor), true);
		 
		 System.out.println("Testing correct protocol, port login and incorrect anchor  handling: ".loc_url."/#:");
         assertEquals("Failure ", urlVal.isValid(loc_url."/#:"), false);
		 
		 System.out.println("Testing correct protocol, correct port,login and URI  handling: ".loc_url."/".basic_uri."//".basic_uri);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri."//".basic_uri), true);
		 
		 System.out.println("Testing correct protocol, correct port,login, URI and anchor  handling: ".loc_url."/".basic_uri."/".basic_uri.basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri."/".basic_uri.basic_anchor), true);
		 
		 System.out.println("Testing correct protocol, correct port,login, URI and incorrect anchor  handling: ".loc_url."/".basic_uri."/:".basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri."/:".basic_anchor), false);
		 
		 loc_url=mainvalidschemes[i].loc_txt.":".basic_url;
		 System.out.println("Testing correct protocol and incorrect login handling: ".loc_url);
         assertEquals("Failure ", urlVal.isValid(loc_url), false);
		 
		 System.out.println("Testing correct protocol,URI and incorrect login handling: ".loc_url."/".basic_uri);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri), false);
		 
		 loc_url.=basic_port;
		 System.out.println("Testing correct protocol, port and incorrect login handling: ".loc_url);
         assertEquals("Failure ", urlVal.isValid(loc_url), false);
		 
		 System.out.println("Testing correct protocol, port, URI and incorrect login handling: ".loc_url."/".basic_uri);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri), false);
		
		 loc_url=mainvalidschemes[i].loc_txt.":".loc_txt."@".basic_url;
		 System.out.println("Testing correct protocol and correct login and password handling: ".loc_url);
         assertEquals("Failure ", urlVal.isValid(loc_url), true);
		 
		 System.out.println("Testing correct protocol and correct login and password with anchor handling: ".loc_url."/".basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_anchor), true);
		 
		 System.out.println("Testing correct protocol and correct login and password with incorrect anchor handling: ".loc_url."/.".basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url."/.".basic_anchor), false);
		 
		 System.out.println("Testing correct protocol, login and password, URI handling: ".loc_url."/".basic_uri);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri), true);
		 
		 System.out.println("Testing correct protocol, login and password, URI, anchor handling: ".loc_url."/".basic_uri.basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri.basic_anchor), true);
		 
		 System.out.println("Testing correct protocol, login and password, URI, incorrect anchor handling: ".loc_url."/".basic_uri."?a=".basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri."?a=".basic_anchor), false);
		 
		 loc_url.=basic_port;
		 System.out.println("Testing correct protocol, port, login and password handling: ".loc_url);
         assertEquals("Failure ", urlVal.isValid(loc_url), true);
		 
		 System.out.println("Testing correct protocol, port, login and password with anchor handling: ".loc_url."/".basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_anchor), true);
		 
		 System.out.println("Testing correct protocol, port, login and password with incorrect anchor handling: ".loc_url.basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url.basic_anchor), false);
		 
		 System.out.println("Testing correct protocol, port, URI, login and password handling: ".loc_url."/".basic_uri);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri), true);
		 
		 System.out.println("Testing correct protocol, port, URI, login and password with anchor handling: ".loc_url."/".basic_uri.basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri.basic_anchor), true);
		 
		 System.out.println("Testing correct protocol, port, URI, login and password with incorrect anchor handling: ".loc_url."/".basic_uri.basic_anchor."/a");
         assertEquals("Failure ", urlVal.isValid(loc_url."/".basic_uri.basic_anchor,"/a"), false);
		 
		 System.out.println("Testing correct protocol, port, login, password and incorrect URI handling: ".loc_url.":".basic_uri);
         assertEquals("Failure ", urlVal.isValid(loc_url.":".basic_uri), false);
		 
		 loc_url=mainvalidschemes[i].loc_txt."@".loc_txt."@".basic_url;
		 System.out.println("Testing correct protocol and incorrect login&password pair handling: ".loc_url);
         assertEquals("Failure ", urlVal.isValid(loc_url), false);
		 
		 loc_url.=basic_port;
		 System.out.println("Testing correct protocol, port and incorrect login&password pair handling: ".loc_url);
         assertEquals("Failure ", urlVal.isValid(loc_url), false);
		 
		 loc_url=mainvalidschemes[i].loc_txt."@".loc_txt.":".basic_url;
		 System.out.println("Testing correct protocol and incorrect login&password pair handling: ".loc_url);
         assertEquals("Failure ", urlVal.isValid(loc_url), false);
		 
		 loc_url.=basic_port;
		 System.out.println("Testing correct protocol,port and incorrect login&password pair handling: ".loc_url);
         assertEquals("Failure ", urlVal.isValid(loc_url), false);
		 
		 loc_url=mainvalidschemes[i].loc_txt.":".loc_txt.":".basic_url;
		 System.out.println("Testing correct protocol and incorrect login&password pair handling: ".loc_url);
         assertEquals("Failure ", urlVal.isValid(loc_url), false);
		 
		 System.out.println("Testing correct protocol and incorrect URI, login&password pair handling: ".loc_url.":".basic_uri);
         assertEquals("Failure ", urlVal.isValid(loc_url.":".basic_uri), false);
		 
		 loc_url.=basic_port;
		 System.out.println("Testing correct protocol,port and incorrect login&password pair handling: ".loc_url);
         assertEquals("Failure ", urlVal.isValid(loc_url), false);
		 
		 System.out.println("Testing correct protocol,port and incorrect URI, login&password pair handling (IPv6 like appearance): ".loc_url.":".basic_uri);
         assertEquals("Failure ", urlVal.isValid(loc_url.":".basic_uri), false);
		 
		 System.out.println("Testing correct protocol,port and incorrect URI&anchor, login&password pair handling (IPv6 like appearance): ".loc_url.":".basic_uri.":".basic_anchor);
         assertEquals("Failure ", urlVal.isValid(loc_url.":".basic_uri.":".basic_anchor), false);
		 
		}//j loop
	   }//i loop 
   } //testIsValid method
   
   public void testAnyOtherUnitTest()
   {
	   
   }
   /**
    * Create set of tests by taking the testUrlXXX arrays and
    * running through all possible permutations of their combinations.
    *
    * @param testObjects Used to create a url.
    */
   

}
